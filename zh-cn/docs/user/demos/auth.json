{
  "filename": "auth.md",
  "__html": "<h1>服务鉴权</h1>\n<p>类似支付之类的对安全性敏感的业务可能会有限制匿名调用的需求。在加固安全性方面，2.7.5 引入了基于AK/SK机制的认证鉴权机制，并且引入了鉴权服务中心，主要原理是消费端在请求需要鉴权的服务时，会通过SK、请求元数据、时间戳、参数等信息来生成对应的请求签名，通过Dubbo的Attahcment机制携带到对端进行验签，验签通过才进行业务逻辑处理。如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/Ooo0oO0o0oO/res/master/auth.png\" alt=\"\"></p>\n<p>具体的接入方式也并不复杂：</p>\n<ol>\n<li>\n<p>使用者需要在微服务站点上填写自己的应用信息，并为该应用生成唯一的证书凭证。</p>\n</li>\n<li>\n<p>之后在管理站点上提交工单，申请某个敏感业务服务的使用权限，并由对应业务管理者进行审批，审批通过之后，会生成对应的AK/SK到鉴权服务中心。</p>\n</li>\n<li>\n<p>导入该证书到对应的应用下，并且进行配置。配置方式也十分简单，以注解方式为例：</p>\n<p>服务提供端，只需要设置<code>service.auth</code>为true，表示该服务的调用需要鉴权认证通过。<code>param.sign</code>为<code>true</code>表示需要对参数也进行校验。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Service</span>(parameters = {<span class=\"hljs-string\">\"service.auth\"</span>,<span class=\"hljs-string\">\"true\"</span>,<span class=\"hljs-string\">\"param.sign\"</span>,<span class=\"hljs-string\">\"true\"</span>})\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AuthDemoServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AuthService</span> </span>{\n}\n\n</code></pre>\n<p>服务消费端，只需要配置好对应的证书等信息即可，之后会自动地在对这些需要认证的接口发起调用前进行签名操作，通过与鉴权服务的交互，用户无需在代码中配置AK/SK这些敏感信息，并且在不重启应用的情况下刷新AK/SK，达到权限动态下发的目的。</p>\n</li>\n</ol>\n<p>该方案目前已经提交给Dubbo开源社区，并且完成了基本框架的合并，除了AK/SK的鉴权方式之外，通过SPI机制支持用户可定制化的鉴权认证以及适配公司内部基础设施的密钥存储。</p>\n",
  "link": "/zh-cn/docs/user/demos/auth.html",
  "meta": {}
}